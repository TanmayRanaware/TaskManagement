version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: taskmanagement-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: taskmanagement
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: taskmanagement-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    container_name: taskmanagement-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - MONGO_URI=mongodb://admin:password@mongodb:27017/taskmanagement?authSource=admin
      - REDIS_URL=redis://:password@redis:6379
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - JWT_REFRESH_SECRET=dev-refresh-secret-change-in-production
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web App
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: development
    container_name: taskmanagement-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8080
      - VITE_WS_URL=ws://localhost:8080
      - VITE_APP_NAME=TaskManagement
      - VITE_ENVIRONMENT=development
    volumes:
      - ./web:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - taskmanagement-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: taskmanagement-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
      - web
    networks:
      - taskmanagement-network

  # Mailhog (Development Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: taskmanagement-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - taskmanagement-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  taskmanagement-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
